#!/usr/bin/env php

<?php
ob_start();

use Classes\DependencyInjection\DependencyInjection;
use Classes\DependencyInjection\ClassBuilder;
use Classes\DependencyInjection\Container;
use Classes\Model\Orm\SchemaGenerator;
use Classes\Model\Orm\EntityGenerator;

//set_time_limit(0);
define('ROOT_DIR', dirname(dirname(__FILE__)));
require ROOT_DIR . '/lib/classes/DependencyInjection/Autoload.php';

$parameters = (new DependencyInjection())->getParameters();

/** @var Container $container */
$container = new ClassBuilder($parameters);

if (array_search('generate', $argv)) {

    if (count(array_keys($argv)) < 3) {
        die('No argument given for generate command.');
    }

    /** @var EntityGenerator $entityGenerator */
    $entityGenerator = $container->get('entity.generator');

    $entityArg = $argv[2];

    if ($entityArg !== "entities") {
        /** @var array $mappedClasses */
        $mappedClasses = $entityGenerator->getClassMetaDataFactory()->getMappedClasses();

        /* Transform like real entity name pattern */
        $entityArg = ucfirst(strtolower($entityArg));

        /* If not defined in yaml mapping files directory */
        if (!in_array($entityArg, $mappedClasses)) {
            die('Undefined entity ' . $entityArg);
        }

        $entityGenerator->generateFile($entityArg);
    }

    if ($entityArg === 'entities') {
        $entityGenerator->generateFiles();
    }
}

if (array_search('create-schema', $argv)) {
    /** @var SchemaGenerator $schemaGenerator */
    $schemaGenerator = $container->get('schema.generator');
    $schemaGenerator->createSchema();
}

return;